

1. 자바 역사

    1995년 썬 마이크로시스템즈 에서 개발한 객체지향 프로그래밍 언어
    처음에는 인터넷용 가전제품을 위한 언어로 개발한 Oak(오크) 언어에서 출발 하여 나중에 자바 언어로 발전

 2. 자바 실행원리

 1. 소스코드 작성 : 자바 프로그램을 작성 하기 위해서는 우선 텍스트 편집기 등을 이용하여 자바 소스코드(.java) 작성

 2. 컴파일        : 자바 소스 코드는 자바 컴파일러를 이용하여 바이트 코드(.class 파일)로 변환됨 이때 바이트 코드는 JVM에서 실행 가능한 형태로 변한됨

 3. 클래스 로딩   : 자바 프로그램 실행될때 JVM은 프로그램에 필요한 클래스들 로딩함 이때 클로스 로더는 클래스 파일 검색 하고  , 필요한 클래스들을 메모리에 로드함

 4. 바이트 코드 검증 : 로딩된 클래스 파일을 검색하고, 필요한 클래스들을 메모리에 로드한다.

 5. 인터프리터 및 JIT 컴파일 : 인터프리터는 바이트 코드를 한 줄씩 읽어 해석하며 JIT 컴파일러는 바이트 코드를 네이티브 코드 로 번역하여 실행 속도 높임

 6. 실행 결과 출력  : 자바 프로그램의 실행 결과는 보통 콘솔(console)에 출력됨  출력 결과는 System.out.println() 메서드를 이용하여 출력할 수 있습니다.

 JVM :
    사람 언어에서 컴퓨터 기계어로 바꿔주는 컴파일 번역 JVM이 깔린 어떤 종류의 컴퓨터에서든 돌 수 있게 해주는것
    외우기 쉽게   : 자바를 컴파일해서  클래스 바이트코드~

JRE :
    자바로 짠 소프트웨어가 컴파일 및 빌드까지 다 된 다음 이를 사용할 곳에 주여져서 실행이 될 때
    그 환경 요소들로서 필요한 것들 ( List , Map , Set) 제공함


(자바개발도구약자) JDK :
    JRE를 포함함
    자바의 런타임때 필요한 요소들 포함 개발에 필요한것들 jdbc(자바 코드 컴파일할때 쓰는)
    자바를 디버깅할 때 쓰는 jdb 서로 연관 있는 클래스들을 하나의 JAR 파일로 묶어주는 jar